#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include <stdio.h>
#define FRAME_SKIP 0
#define WINDOW 10
using namespace cv;
using namespace std;

int p1_score=0, p2_score=0;
int black_count[WINDOW]={0},white_count[WINDOW]={0},mag_count[WINDOW]={0};
int o_black_count[10]={0},o_white_count[10]={0},o_mag_count[10]={0};
int frame =0;
int f=1;
int max_w=0,max_b=0,max_m=0;

void get_max_count()
{
  max_w=0,max_b=0,max_m=0;
  for(int i=0;i<WINDOW;i++)
  {
    if(max_w<white_count[i])
    {
      max_w=white_count[i];
    }
    if(max_b<black_count[i])
    {
      max_b=black_count[i];
    }
    if(mag_count[i]>0)
    {
      max_m=1;
    }

    white_count[i]=0;
    black_count[i]=0;
    mag_count[i]=0;
  }
  return;
}



/*void get_count(Mat src)
{
 // Mat src1=Mat(src.rows,src.cols,CV_8UC3);
  Mat src1=src;
  Mat src_gray;
  cvtColor( src, src_gray, CV_BGR2GRAY );

  GaussianBlur( src_gray, src_gray, Size(9, 9), 5, 5 );

  vector<Vec3f> circles;

  HoughCircles( src_gray, circles, CV_HOUGH_GRADIENT, 1, 12, 20, 12, 13, 18 );

  for( size_t i = 0; i < circles.size(); i++ )
  {

    Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
    int radius = cvRound(circles[i][2]);


    if(src.at<Vec3b>(center)[0]<100 && src.at<Vec3b>(center)[0]>30 )
    {
      if(src.at<Vec3b>(center)[1]>95 &&  src.at<Vec3b>(center)[2]>100)
      {
        // white pieces
        circle( src1, center, radius, Scalar(255,255,255), 3, 8, 0 );
        white_count[frame]=white_count[frame]+1;
      }
      if(src.at<Vec3b>(center)[1]<80 &&  src.at<Vec3b>(center)[2]<80) 
      {
        // black pieces
        circle( src1, center, radius, Scalar(255,0,0), 3, 8, 0 );
        black_count[frame]=black_count[frame]+1;
      }
      if(src.at<Vec3b>(center)[1]<80 &&  src.at<Vec3b>(center)[2]>80)
      {
        // magenta piece
        circle( src1, center, radius, Scalar(0,255,0), 3, 8, 0 );
        mag_count[frame]=mag_count[frame]+1;
      }
      

      //printf("\nwhite %d : %d,%d,%d",i,src.at<Vec3b>(center)[0],src.at<Vec3b>(center)[1],src.at<Vec3b>(center)[2]);
        
    }
    else
    {
      //circle( src, center, radius, Scalar(0,0,255), 3, 8, 0 );
    }
    
     //circle( src1, center, 3, Scalar(0,255,0), -1, 8, 0 );
     
        
  }
  char name[100];
  sprintf(name,"images/x%d.png",frame);
  imshow("src",src1);
  imwrite(name,src1);
  waitKey(2);
  return;
}*/

void get_count(Mat src)
{
  Mat src1=src;
  Mat src_gray;
  cvtColor( src, src_gray, CV_BGR2GRAY );
  GaussianBlur( src_gray, src_gray, Size(9, 9), 5, 5 );
  vector<Vec3f> circles;
  HoughCircles( src_gray, circles, CV_HOUGH_GRADIENT, 1, 10, 20, 12, 10, 20 );
  Mat img_black,img_white,img_raani;
  char name[100];
  sprintf(name,"/home/suriay/study/DIP/pro/N1/black/%d.jpg",f);
  img_black=imread(name,0);
  sprintf(name,"/home/suriay/study/DIP/pro/N1/white/%d.jpg",f);
  img_white=imread(name,0);
  sprintf(name,"/home/suriay/study/DIP/pro/N1/red/%d.jpg",f);
  img_raani=imread(name,0);
  
  for( size_t i = 0; i < circles.size(); i++ )
  {

    Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
    int radius = cvRound(circles[i][2]);
    if(img_black.at<uchar>(center) < 50)
    {
      circle( src, center, radius, Scalar(0,0,0), 3, 8, 0 );
      black_count[frame]=black_count[frame]+1;
    }
    else if(img_white.at<uchar>(center) < 50)
    {
      circle( src, center, radius, Scalar(255,255,255), 3, 8, 0 );
      white_count[frame]=white_count[frame]+1;
    }
    else if(img_raani.at<uchar>(center) < 50)
    {
      circle( src, center, radius, Scalar(0,0,255), 3, 8, 0 );
      mag_count[frame]=mag_count[frame]+1;
    }
    
  
    imshow("src",src);
  }

  resize(img_black,img_black,Size(img_black.cols/3,img_black.rows/3));
  resize(img_white,img_white,Size(img_white.cols/3,img_white.rows/3));
  resize(img_raani,img_raani,Size(img_raani.cols/3,img_raani.rows/3));
  //printf("\n%d",f);
  //imshow("black",img_black);
  //imshow("white",img_white);
  //imshow("raani",img_raani);
  waitKey(1);
}

int main(int argc, char **argv)
{
  FILE *fp;
  fp=fopen("data2.csv","w");
  VideoCapture vid=VideoCapture(argv[1]);
  Mat img;
  vid>>img;
  while(img.data)
  {
    
    
    
    for(int i=0;i<=FRAME_SKIP;i++)
    {
      vid>>img;

    }
    //get_count(img(Rect(3*90,0,img.cols-3*160,img.rows)));
    get_count(img(Rect(Point(346,15),Point(img.cols-250,img.rows))));
    frame=(frame+1)%WINDOW;

    if(frame==0)
    {
      printf("\nBlack : %d\tWhite : %d\tMag : %d\n",black_count[frame],white_count[frame],mag_count[frame]);
      fprintf(fp,"%d,%d,%d\n",black_count[frame],white_count[frame],mag_count[frame]);
      get_max_count();

    }
    
    if(f==3200)
      break;
    
    f++;
  }
  vid.release();
  fclose(fp);
  return 0;
}

