#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include <iostream>
#include <stdio.h>

using namespace cv;


int main(int argc, char** argv)
{
  Mat src, src_gray;


  src = imread( argv[1], 1 );
//resize(src,src,Size(src.cols*3,src.rows*3));
  if( !src.data )
    { return -1; }
Mat hsi,ycb;
//cvtColor(src, hsi, CV_BGR2HSV);
Mat h[3];
split(src, h);
h[0]=255-h[0];
h[1]=255-h[1];
h[2]=255-h[2];
imshow("s",255-h[1]);
imshow("v",255-h[2]);
Mat s;
merge(h,3,s);
imshow("combine",s);
  cvtColor( src, src_gray, CV_BGR2GRAY );


  GaussianBlur( 255-h[1], src_gray, Size(3, 3), 2, 2 );

  vector<Vec3f> circles;


  HoughCircles( src_gray, circles, CV_HOUGH_GRADIENT, 1, 20,40, 30, 10, 100 );


  for( size_t i = 0; i < circles.size(); i++ )
  {
      Point center(cvRound(circles[i][0]), cvRound(circles[i][1]));
      int radius = cvRound(circles[i][2]);

      circle( src, center, 3, Scalar(0,255,0), -1, 8, 0 );

      circle( src, center, radius, Scalar(0,0,255), 3, 8, 0 );
   }


  namedWindow( "Hough Circle Transform Demo", CV_WINDOW_AUTOSIZE );
 // resize(src,src,Size(src.cols/3,src.rows/3));
  imshow( "Hough Circle Transform Demo", src );

  waitKey(0);
  return 0;
}
